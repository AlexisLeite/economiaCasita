import {
  Alert,
  Button,
  Container,
  Heading,
  HStack,
  Input,
  Select,
  Stack,
  VStack,
} from "@chakra-ui/react";
import type { NextPage } from "next";
import Head from "next/head";
import React from "react";
import { mutate } from "../src/api/operations";
import AssetsUploader, {
  AssetsUploaderControl,
} from "../src/components/assetsUploader";
import { useMergedState } from "../src/util/mergedStatus";
import styles from "../styles/Home.module.css";

interface IState {
  // Control
  currentOperation: "Income" | "Outcome" | null;
  uploading?: boolean;
  createProcessStarted?: boolean;

  // Info
  error?: string | null;

  // Image
  imageId?: string;
  imageSelected?: boolean;

  // Data
  concept?: string;
  amount?: number;

  // Assets uploader
  start?: AssetsUploaderControl;
}

const initialState = {
  currentOperation: null,
};

const Home: NextPage = () => {
  const [state, originalMergeState, setState] =
    useMergedState<IState>(initialState);
  const uploaderRef = React.useRef<HTMLDivElement>(null);

  const mergeState = (mergeState: Partial<IState>) => {
    if (!("error" in mergeState)) mergeState.error = null;
    originalMergeState(mergeState);
  };
  void React.useEffect(() => {
    if (state.createProcessStarted || !state.uploading) return;
    if (!state.concept || !state.amount) {
      mergeState({ uploading: false, error: "Faltan datos" });
      return;
    }

    async function fetch() {
      if (uploaderRef.current) {
        // It is an expense
        if (state.imageSelected && !state.imageId && state.start) {
          // There it is an image selected but it must be uploaded
          state.start();
          return;
        } else if (state.imageSelected) {
          // There it is an image selected and uploaded
          await mutate.expenses.create({
            amount: state.amount!,
            concept: state.concept!,
            date: new Date().toISOString(),
            image: state.imageId,
          });
        } else {
          // There is no image
          await mutate.expenses.create({
            amount: state.amount!,
            concept: state.concept!,
            date: new Date().toISOString(),
          });
        }
      } else {
        // It is an income
        await mutate.incomes.create({
          amount: state.amount!,
          concept: state.concept!,
        });
      }
      setState(initialState);
    }
    fetch();
  }, [
    state.uploading,
    state.start,
    state.imageSelected,
    uploaderRef.current,
    state.imageId,
    state.concept,
    state.amount,
  ]);

  console.log({ state });

  return (
    <div>
      <Head>
        <title>Nuestra economía en crecimiento</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <form
        onSubmit={(ev) => {
          ev.preventDefault();
          mergeState({ uploading: true });
        }}
      >
        <Container maxW="container.sm">
          <Heading size="xl" my={10} textAlign="center">
            Agregar{" "}
            {state.currentOperation === "Income"
              ? "entrada"
              : state.currentOperation === "Outcome"
              ? "gasto"
              : "movimiento"}
          </Heading>
          <VStack m={4} alignItems="normal" gap={2}>
            {state.error && <Alert>{state.error}</Alert>}
            <HStack gap={2}>
              <Input
                required
                disabled={state.uploading}
                placeholder="Nombre"
                onChange={(ev) => {
                  mergeState({ concept: ev.target.value });
                }}
                value={state.concept ?? ""}
              />
              <Input
                required
                disabled={state.uploading}
                placeholder="Costo"
                pattern="^[\d]+(?:\.?\d+)$"
                title="Debe ser un número"
                onChange={(ev) => {
                  mergeState({ amount: parseFloat(ev.target.value) });
                }}
                value={state.amount ?? ""}
              />
              <Select
                required
                onChange={(ev) => {
                  mergeState({ currentOperation: ev.target.value as any });
                }}
                value={
                  state.currentOperation !== null ? state.currentOperation : ""
                }
              >
                {state.currentOperation === null && <option />}
                <option value="Income">Entrada</option>
                <option value="Outcome">Salida</option>
              </Select>
            </HStack>
            {state.currentOperation === "Outcome" && (
              <AssetsUploader
                ref={uploaderRef}
                kind="small"
                onChange={([imageId]) => {
                  mergeState({ imageId });
                }}
                onSelect={() => {
                  mergeState({ imageSelected: true });
                }}
                getControl={({ start }) => {
                  mergeState({ start });
                }}
              />
            )}
            {state.currentOperation !== null && (
              <Button
                isLoading={state.uploading}
                disabled={state.uploading}
                type="submit"
              >
                Crear
              </Button>
            )}
          </VStack>
        </Container>
      </form>
    </div>
  );
};

export default Home;
